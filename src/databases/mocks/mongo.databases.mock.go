// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/databases/mongo.databases.go

// Package mock_databases is a generated GoMock package.
package mock_databases

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockDatabases is a mock of Databases interface.
type MockDatabases struct {
	ctrl     *gomock.Controller
	recorder *MockDatabasesMockRecorder
}

// MockDatabasesMockRecorder is the mock recorder for MockDatabases.
type MockDatabasesMockRecorder struct {
	mock *MockDatabases
}

// NewMockDatabases creates a new mock instance.
func NewMockDatabases(ctrl *gomock.Controller) *MockDatabases {
	mock := &MockDatabases{ctrl: ctrl}
	mock.recorder = &MockDatabasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabases) EXPECT() *MockDatabasesMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabases) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDatabasesMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabases)(nil).Close))
}

// DeleteTodo mocks base method.
func (m *MockDatabases) DeleteTodo(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockDatabasesMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockDatabases)(nil).DeleteTodo), id)
}

// GetAllTodos mocks base method.
func (m *MockDatabases) GetAllTodos(result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodos", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllTodos indicates an expected call of GetAllTodos.
func (mr *MockDatabasesMockRecorder) GetAllTodos(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodos", reflect.TypeOf((*MockDatabases)(nil).GetAllTodos), result)
}

// InsertTodo mocks base method.
func (m *MockDatabases) InsertTodo(data bson.M) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTodo", data)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTodo indicates an expected call of InsertTodo.
func (mr *MockDatabasesMockRecorder) InsertTodo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTodo", reflect.TypeOf((*MockDatabases)(nil).InsertTodo), data)
}

// UpdateTodo mocks base method.
func (m *MockDatabases) UpdateTodo(id primitive.ObjectID, data bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockDatabasesMockRecorder) UpdateTodo(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockDatabases)(nil).UpdateTodo), id, data)
}
